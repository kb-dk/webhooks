package {{package}}.impl;

import {{package}}.*;
{{#imports}}import {{import}};
{{/imports}}

import dk.kb.util.webservice.exception.ServiceException;
import dk.kb.util.webservice.exception.InternalServiceException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;
import java.util.Arrays;
import java.util.stream.Collectors;
{{#generateOperationBody}}
import java.io.File;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
{{#loadTestDataFromFile}}
import org.openapitools.codegen.utils.JsonCache;
import org.openapitools.codegen.utils.JsonCache.CacheException;
{{/loadTestDataFromFile}}
{{/generateOperationBody}}
import dk.kb.util.webservice.ImplBase;
import javax.validation.constraints.NotNull;
import javax.ws.rs.*;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.Request;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.SecurityContext;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.ext.ContextResolver;
import javax.ws.rs.ext.Providers;
import javax.ws.rs.core.MediaType;
import org.apache.cxf.jaxrs.model.wadl.Description;
import org.apache.cxf.jaxrs.model.wadl.DocTarget;
import org.apache.cxf.jaxrs.ext.MessageContext;
import org.apache.cxf.jaxrs.ext.multipart.*;

import io.swagger.annotations.Api;
{{#useSpringAnnotationConfig}}
import org.springframework.stereotype.Service;
{{/useSpringAnnotationConfig}}

{{#useSpringAnnotationConfig}}
@Service("{{classname}}")
{{/useSpringAnnotationConfig}}
{{#description}}
{{/description}}
{{#appName}}
/**
 * {{{appName}}}
 *
 {{#appDescription}}
 * <p>{{{appDescription}}}
 {{/appDescription}}
 *
 */
{{/appName}}
public class {{classname}}ServiceImpl extends ImplBase implements {{classname}} {
    private Logger log = LoggerFactory.getLogger(this.toString());

{{#generateOperationBody}}
{{#loadTestDataFromFile}}
    private JsonCache cache;

    {
        try {
            File cacheFile = new File(System.getProperty("jaxrs.test.server.json",
                    "{{testDataFile}}"));
            cache = JsonCache.Factory.instance.get("test-data").load(cacheFile).child("/{{invokerPackage}}/{{classname}}");
        } catch (CacheException e) {
            e.printStackTrace();
        }
    }

{{/loadTestDataFromFile}}
{{/generateOperationBody}}


{{#operations}}
{{#operation}}
    {{#summary}}
    /**
     * {{summary}}
     * {{#allParams}}
     * @param {{baseName}}: {{description}}
     * {{/allParams}}
     * @return <ul>{{#responses}}
      *   <li>code = {{{code}}}, message = "{{{message}}}"{{^vendorExtensions.x-java-is-response-void}}, response = {{{baseType}}}.class{{#containerType}}, responseContainer = "{{{containerType}}}"{{/containerType}}{{/vendorExtensions.x-java-is-response-void}}</li>{{/responses}}
      *   </ul>
      * @throws ServiceException when other http codes should be returned
      *
     {{#notes}}
      * {{notes}}
      *
      {{/notes}}
      * @implNote return will always produce a HTTP 200 code. Throw ServiceException if you need to return other codes
     */
    {{/summary}}
    @Override
    public {{>returnTypes}} {{operationId}}({{!
        }}{{#allParams}}{{!
            }}{{>pathParamsImpl}}{{!
            }}{{>queryParamsImpl}}{{!
            }}{{>headerParamsImpl}}{{!
            }}{{>bodyParamsImpl}}{{!
            }}{{>formParamsImpl}}{{!
            }}{{#hasMore}}, {{/hasMore}}{{!
        }}{{/allParams}}) throws ServiceException {
    {{^loadTestDataFromFile}}
        // TODO: Implement...
    {{/loadTestDataFromFile}}{{!

}}{{! generic response: }}
        {{#useGenericResponse}}{{!
            }}return Response.ok().entity("magic!").build();{{/useGenericResponse}}{{!
non-generic response:
        }}{{^useGenericResponse}}{{!
        }}{{#vendorExtensions.x-useGenericResponse}}
        return Response.ok().entity("magic!").build();
        {{/vendorExtensions.x-useGenericResponse}}{{!
        }}{{^vendorExtensions.x-useGenericResponse}}{{!
non-void response:
                }}{{^vendorExtensions.x-java-is-response-void}}{{!
pre-populated operation body:
                    }}{{#generateOperationBody}}
        try { {{#vendorExtensions.x-streamingOutput}}
            // Show download link in Swagger UI, inline when opened directly in browser
            setFilename("somefile", true, false);
            return output -> output.write("Magic".getBytes(java.nio.charset.StandardCharsets.UTF_8));{{!
        }}{{/vendorExtensions.x-streamingOutput}}{{!
        }}{{^vendorExtensions.x-streamingOutput}}
    {{{vendorExtensions.x-java-operation-body}}}{{!
        }}{{/vendorExtensions.x-streamingOutput}}
        } catch (Exception e){
            throw handleException(e);
        }{{/generateOperationBody}}
    {{! null response:
    }}{{^generateOperationBody}}
        return null;{{/generateOperationBody}}{{!
    }}{{/vendorExtensions.x-java-is-response-void}}{{!
            }}{{/vendorExtensions.x-useGenericResponse}}{{!
    }}{{/useGenericResponse}}
    }

{{/operation}}

}
{{/operations}}
